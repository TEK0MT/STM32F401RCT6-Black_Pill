
STM32F401RCT6-Black_Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000440  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080005d4  080005d4  000015d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005f4  080005f4  000015fc  2**0
                  CONTENTS
  4 .ARM          00000000  080005f4  080005f4  000015fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005f4  080005fc  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f4  080005f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f8  080005f8  000015f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080005fc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005fc  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008f8  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f5  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00002320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a8  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000456  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000743  00000000  00000000  0000291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004586  00000000  00000000  00003061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000075e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000029c  00000000  00000000  0000762c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000078c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005bc 	.word	0x080005bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005bc 	.word	0x080005bc

080001d4 <SCB_SetGroupPriority>:
/*
 * @brief Set Priority Grouping
 * @details Set how many groups and sub priority using the required unlock sequence
 * @param priority an uint32_t parameter
 * */
void SCB_SetGroupPriority(uint32_t priority){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint32_t Register_Value = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]

	Register_Value = SCB->AIRCR;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <SCB_SetGroupPriority+0x40>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	60fb      	str	r3, [r7, #12]

	Register_Value &= ~(((uint32_t)PRIORITY_BITS_MASK << PRIORITY_BITS_POS) | ((uint32_t)VECTKEY_MASK << VECTKEY_POS));
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001ec:	4013      	ands	r3, r2
 80001ee:	60fb      	str	r3, [r7, #12]

	Register_Value = (((uint32_t)0x05FA << VECTKEY_POS) | (priority << PRIORITY_BITS_POS) | Register_Value);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	021a      	lsls	r2, r3, #8
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000200:	60fb      	str	r3, [r7, #12]

	SCB->AIRCR = Register_Value;
 8000202:	4a04      	ldr	r2, [pc, #16]	@ (8000214 <SCB_SetGroupPriority+0x40>)
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	60d3      	str	r3, [r2, #12]
}
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <Systick_Init>:

/*
 * @brief Initializing System Timer
 * @param The load to the system timer
 * */
uint32_t Systick_Init(uint32_t load){
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t ret = FUNC_RIGHT;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
	if(load <= 0 || load > 0xFFFFFF){
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <Systick_Init+0x1a>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000230:	d302      	bcc.n	8000238 <Systick_Init+0x20>
		ret = FUNC_ERROR;
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e017      	b.n	8000268 <Systick_Init+0x50>
	}
	else{
	//Disable Systick
	CLEAR_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_ENABLE_MASK);
 8000238:	4b0f      	ldr	r3, [pc, #60]	@ (8000278 <Systick_Init+0x60>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0e      	ldr	r2, [pc, #56]	@ (8000278 <Systick_Init+0x60>)
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
	//Clear current ticks
	SYSTICK->SYST_CVR = 0;
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <Systick_Init+0x60>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
	//Load the Systick register
	SYSTICK->SYST_RVR = load;
 800024a:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <Systick_Init+0x60>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6053      	str	r3, [r2, #4]
#if SYSTIC_CLOCK == SYSTIC_EXTERNAL_CLOCK
	CLEAR_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_CLOCK_SELECT_MASK);
 8000250:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <Systick_Init+0x60>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a08      	ldr	r2, [pc, #32]	@ (8000278 <Systick_Init+0x60>)
 8000256:	f023 0301 	bic.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
	SET_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_CLOCK_SELECT_MASK);
#else
#error "Invalid clock selection"
#endif
	//Disable IRQ exceptions
	CLEAR_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_IRQ_MASK);
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <Systick_Init+0x60>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <Systick_Init+0x60>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6013      	str	r3, [r2, #0]
	}
	return ret;
 8000268:	68fb      	ldr	r3, [r7, #12]
}
 800026a:	4618      	mov	r0, r3
 800026c:	3714      	adds	r7, #20
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000e010 	.word	0xe000e010

0800027c <Systick_PereodicInterval>:
		SET_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_ENABLE_MASK);
	}
	return ret;
}

uint32_t Systick_PereodicInterval(uint32_t load ,ptr_function *call_back){
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	uint32_t ret = FUNC_RIGHT;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
	if(call_back == 0 || load <= 0 || load > 0xFFFFFF){
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d006      	beq.n	800029e <Systick_PereodicInterval+0x22>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d003      	beq.n	800029e <Systick_PereodicInterval+0x22>
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800029c:	d302      	bcc.n	80002a4 <Systick_PereodicInterval+0x28>
		ret = FUNC_ERROR;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e014      	b.n	80002ce <Systick_PereodicInterval+0x52>
	}
	else{
		//Load the register
		SYSTICK->SYST_RVR = load;
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <Systick_PereodicInterval+0x60>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6053      	str	r3, [r2, #4]
		//Assign the exception you need
		Systic_Call_Back = call_back;
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	@ (80002e0 <Systick_PereodicInterval+0x64>)
 80002ae:	6013      	str	r3, [r2, #0]
		//Assign the timer mode to periodic interval
		systic_mode = SYSTICK_PERIODICINTERVAL_MODE;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <Systick_PereodicInterval+0x68>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	601a      	str	r2, [r3, #0]
		//Enable IRQ for systick
		SET_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_IRQ_MASK);
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <Systick_PereodicInterval+0x60>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <Systick_PereodicInterval+0x60>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6013      	str	r3, [r2, #0]
		//Enable Systick
		SET_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_ENABLE_MASK);
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <Systick_PereodicInterval+0x60>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <Systick_PereodicInterval+0x60>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
	}
	return ret;
 80002ce:	68fb      	ldr	r3, [r7, #12]
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e010 	.word	0xe000e010
 80002e0:	2000001c 	.word	0x2000001c
 80002e4:	20000020 	.word	0x20000020

080002e8 <SysTick_Handler>:
	val = SYSTICK->SYST_CVR - SYSTICK->SYST_RVR;
	return val;
}


void SysTick_Handler(void){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	if(Systic_Call_Back){
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <SysTick_Handler+0x40>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d016      	beq.n	8000322 <SysTick_Handler+0x3a>
		if(systic_mode == SYSTICK_SINGLEINTERVAL_MODE){
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <SysTick_Handler+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10f      	bne.n	800031c <SysTick_Handler+0x34>
			CLEAR_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_ENABLE_POS);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <SysTick_Handler+0x48>)
 80002fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000330 <SysTick_Handler+0x48>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6013      	str	r3, [r2, #0]
			SYSTICK->SYST_CVR = 0;
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <SysTick_Handler+0x48>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
			SYSTICK->SYST_RVR = 0;
 800030a:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <SysTick_Handler+0x48>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
			CLEAR_BIT(SYSTICK->SYST_CSR,SYSTICK_BIT_IRQ_POS);
 8000310:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <SysTick_Handler+0x48>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <SysTick_Handler+0x48>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]
		}
		Systic_Call_Back();
 800031c:	4b02      	ldr	r3, [pc, #8]	@ (8000328 <SysTick_Handler+0x40>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4798      	blx	r3
	}
	else{ /*Nothing*/ }
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000001c 	.word	0x2000001c
 800032c:	20000020 	.word	0x20000020
 8000330:	e000e010 	.word	0xe000e010

08000334 <HAL_RCC_OscConfig>:
#include "HAL/RCC/STM32F401xx_HAL_RCC.h"
/*
 * @brief Configure the RCC clock
 * @Param osc of RCC_OscInitTypeDef type
 * */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *osc){
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RET = HAL_OK;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
	if(NULL == osc){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d102      	bne.n	800034c <HAL_RCC_OscConfig+0x18>
		RET = HAL_ERROR;
 8000346:	2301      	movs	r3, #1
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e06a      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
	}
	else{
		if(osc->OscillatorType == RCC_OSCILLATORTYPE_HSE){
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d11b      	bne.n	800038c <HAL_RCC_OscConfig+0x58>
			if(osc->HSEState == RCC_HSE_ON){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d110      	bne.n	800037e <HAL_RCC_OscConfig+0x4a>
				SET_BIT(RCC->CFGR,RCC_CFGR_Sw0_POS);
 800035c:	4b34      	ldr	r3, [pc, #208]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800035e:	4a34      	ldr	r2, [pc, #208]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_Sw1_POS);
 8000364:	4b32      	ldr	r3, [pc, #200]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	4a31      	ldr	r2, [pc, #196]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800036a:	f023 0301 	bic.w	r3, r3, #1
 800036e:	6093      	str	r3, [r2, #8]
				SET_BIT(RCC->CR,RCC_CR_HSEON_MASK);
 8000370:	4b2f      	ldr	r3, [pc, #188]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a2e      	ldr	r2, [pc, #184]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800037a:	6013      	str	r3, [r2, #0]
 800037c:	e051      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
			}
			else{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_MASK);
 800037e:	4b2c      	ldr	r3, [pc, #176]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a2b      	ldr	r2, [pc, #172]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000388:	6013      	str	r3, [r2, #0]
 800038a:	e04a      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
			}
		}
		else if (osc->OscillatorType == RCC_OSCILLATORTYPE_HSI){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b02      	cmp	r3, #2
 8000392:	d11b      	bne.n	80003cc <HAL_RCC_OscConfig+0x98>
			if(osc->HSIState == RCC_HSI_ON){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d110      	bne.n	80003be <HAL_RCC_OscConfig+0x8a>
				SET_BIT(RCC->CR,RCC_CR_HSION_MASK);
 800039c:	4b24      	ldr	r3, [pc, #144]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a23      	ldr	r2, [pc, #140]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_Sw0_POS);
 80003a8:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003aa:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_Sw1_POS);
 80003b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003b6:	f023 0301 	bic.w	r3, r3, #1
 80003ba:	6093      	str	r3, [r2, #8]
 80003bc:	e031      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
			}
			else{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_MASK);
 80003be:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	e02a      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
			}
		}
		else if(osc->OscillatorType == RCC_OSCILLATORTYPE_LSE){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d111      	bne.n	80003f8 <HAL_RCC_OscConfig+0xc4>
			if(osc->LSEState == RCC_LSE_ON){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d106      	bne.n	80003ea <HAL_RCC_OscConfig+0xb6>
				SET_BIT(RCC->BDCR,RCC_BDCR_LSEON_MASK);
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80003e0:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80003e8:	e01b      	b.n	8000422 <HAL_RCC_OscConfig+0xee>

			}
			else{
				CLEAR_BIT(RCC->BDCR,RCC_BDCR_LSEON_MASK);
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80003ee:	4a10      	ldr	r2, [pc, #64]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 80003f0:	f023 0301 	bic.w	r3, r3, #1
 80003f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80003f6:	e014      	b.n	8000422 <HAL_RCC_OscConfig+0xee>
			}
		}
		else if(osc->OscillatorType == RCC_OSCILLATORTYPE_LSI){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b08      	cmp	r3, #8
 80003fe:	d110      	bne.n	8000422 <HAL_RCC_OscConfig+0xee>
			if(osc->LSIState == RCC_LSI_ON){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <HAL_RCC_OscConfig+0xe2>
				SET_BIT(RCC->CSR,RCC_CSR_LSION_MASK);
 8000408:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800040a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800040c:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6753      	str	r3, [r2, #116]	@ 0x74
 8000414:	e005      	b.n	8000422 <HAL_RCC_OscConfig+0xee>

			}
			else{
				CLEAR_BIT(RCC->CSR,RCC_CSR_LSION_MASK);
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 8000418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <HAL_RCC_OscConfig+0xfc>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	6753      	str	r3, [r2, #116]	@ 0x74
		}
		else{
			/*Nothing*/
		}
	}
	return RET;
 8000422:	7bfb      	ldrb	r3, [r7, #15]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3714      	adds	r7, #20
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800

08000434 <HAL_RCC_ClockConfig>:
/*
 * @brief Configure the RCC presclares
 * @Param osc of RCC_ClkInitTypeDef type
 * */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *osc){
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RET = HAL_OK;
 800043c:	2300      	movs	r3, #0
 800043e:	73fb      	strb	r3, [r7, #15]
		if(NULL == osc){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d102      	bne.n	800044c <HAL_RCC_ClockConfig+0x18>
			RET = HAL_ERROR;
 8000446:	2301      	movs	r3, #1
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e01a      	b.n	8000482 <HAL_RCC_ClockConfig+0x4e>
		}
		else{
			MODIFY_REG(RCC->CFGR,RCC_AHB_PRESCALER_MASK,osc->AHBCLKDivider);
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	490d      	ldr	r1, [pc, #52]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 800045a:	4313      	orrs	r3, r2
 800045c:	608b      	str	r3, [r1, #8]
			MODIFY_REG(RCC->CFGR,RCC_APB_LOWSPEED_PRESCALER_MASK,osc->APB1CLKDivider);
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4909      	ldr	r1, [pc, #36]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 800046c:	4313      	orrs	r3, r2
 800046e:	608b      	str	r3, [r1, #8]
			MODIFY_REG(RCC->CFGR,RCC_APB_HIGHSPEED_PRESCALER_MASK,osc->APB2CLKDivider);
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4904      	ldr	r1, [pc, #16]	@ (8000490 <HAL_RCC_ClockConfig+0x5c>)
 800047e:	4313      	orrs	r3, r2
 8000480:	608b      	str	r3, [r1, #8]
		}
		return RET;
 8000482:	7bfb      	ldrb	r3, [r7, #15]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800

08000494 <isr>:
#include "CortexM4/CortexM4_CORE_NVIC.h"
#include "CortexM4/CortexM4_CORE_SCB.h"
#include "HAL/RCC/STM32F401xx_HAL_RCC.h"
void System_Clcok_Config(void);
uint32_t timmer = 0;
void isr(void){
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	timmer++;
 8000498:	4b04      	ldr	r3, [pc, #16]	@ (80004ac <isr+0x18>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a03      	ldr	r2, [pc, #12]	@ (80004ac <isr+0x18>)
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	20000024 	.word	0x20000024

080004b0 <main>:
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	SCB_SetGroupPriority(SCB_GROUPPRIORITY_2);
 80004b4:	2005      	movs	r0, #5
 80004b6:	f7ff fe8d 	bl	80001d4 <SCB_SetGroupPriority>
	System_Clcok_Config();
 80004ba:	f000 f80f 	bl	80004dc <System_Clcok_Config>

	Systick_Init(1000);
 80004be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c2:	f7ff fea9 	bl	8000218 <Systick_Init>
	Systick_PereodicInterval(999999,isr);
 80004c6:	4903      	ldr	r1, [pc, #12]	@ (80004d4 <main+0x24>)
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <main+0x28>)
 80004ca:	f7ff fed7 	bl	800027c <Systick_PereodicInterval>
    /* Loop forever */
	while(1){
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <main+0x1e>
 80004d2:	bf00      	nop
 80004d4:	08000495 	.word	0x08000495
 80004d8:	000f423f 	.word	0x000f423f

080004dc <System_Clcok_Config>:

	}
}
void System_Clcok_Config(void){
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc = {.OscillatorType = RCC_OSCILLATORTYPE_HSI,.HSIState=RCC_HSI_ON,.HSEState=RCC_HSE_OFF,.LSEState = RCC_LSE_OFF,.LSIState=RCC_LSI_OFF};
 80004e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <System_Clcok_Config+0x3c>)
 80004e4:	f107 040c 	add.w	r4, r7, #12
 80004e8:	461d      	mov	r5, r3
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	682b      	ldr	r3, [r5, #0]
 80004f0:	6023      	str	r3, [r4, #0]
	RCC_ClkInitTypeDef pre = {.AHBCLKDivider=RCC_AHB_PRESCALER_DIV2,.APB1CLKDivider=RCC_APB1_PRESCALER_DIV2,.APB2CLKDivider=RCC_APB2_PRESCALER_DIV2};
 80004f2:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <System_Clcok_Config+0x40>)
 80004f4:	463b      	mov	r3, r7
 80004f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_RCC_OscConfig(&osc);
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff17 	bl	8000334 <HAL_RCC_OscConfig>
	HAL_RCC_ClockConfig(&pre);
 8000506:	463b      	mov	r3, r7
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff93 	bl	8000434 <HAL_RCC_ClockConfig>
}
 800050e:	bf00      	nop
 8000510:	3720      	adds	r7, #32
 8000512:	46bd      	mov	sp, r7
 8000514:	bdb0      	pop	{r4, r5, r7, pc}
 8000516:	bf00      	nop
 8000518:	080005d4 	.word	0x080005d4
 800051c:	080005e8 	.word	0x080005e8

08000520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000520:	480d      	ldr	r0, [pc, #52]	@ (8000558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000522:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000524:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490d      	ldr	r1, [pc, #52]	@ (8000560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0a      	ldr	r4, [pc, #40]	@ (800056c <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800054e:	f000 f811 	bl	8000574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff ffad 	bl	80004b0 <main>

08000556 <LoopForever>:

LoopForever:
  b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   r0, =_estack
 8000558:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000564:	080005fc 	.word	0x080005fc
  ldr r2, =_sbss
 8000568:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800056c:	20000028 	.word	0x20000028

08000570 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC_IRQHandler>
	...

08000574 <__libc_init_array>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4d0d      	ldr	r5, [pc, #52]	@ (80005ac <__libc_init_array+0x38>)
 8000578:	4c0d      	ldr	r4, [pc, #52]	@ (80005b0 <__libc_init_array+0x3c>)
 800057a:	1b64      	subs	r4, r4, r5
 800057c:	10a4      	asrs	r4, r4, #2
 800057e:	2600      	movs	r6, #0
 8000580:	42a6      	cmp	r6, r4
 8000582:	d109      	bne.n	8000598 <__libc_init_array+0x24>
 8000584:	4d0b      	ldr	r5, [pc, #44]	@ (80005b4 <__libc_init_array+0x40>)
 8000586:	4c0c      	ldr	r4, [pc, #48]	@ (80005b8 <__libc_init_array+0x44>)
 8000588:	f000 f818 	bl	80005bc <_init>
 800058c:	1b64      	subs	r4, r4, r5
 800058e:	10a4      	asrs	r4, r4, #2
 8000590:	2600      	movs	r6, #0
 8000592:	42a6      	cmp	r6, r4
 8000594:	d105      	bne.n	80005a2 <__libc_init_array+0x2e>
 8000596:	bd70      	pop	{r4, r5, r6, pc}
 8000598:	f855 3b04 	ldr.w	r3, [r5], #4
 800059c:	4798      	blx	r3
 800059e:	3601      	adds	r6, #1
 80005a0:	e7ee      	b.n	8000580 <__libc_init_array+0xc>
 80005a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a6:	4798      	blx	r3
 80005a8:	3601      	adds	r6, #1
 80005aa:	e7f2      	b.n	8000592 <__libc_init_array+0x1e>
 80005ac:	080005f4 	.word	0x080005f4
 80005b0:	080005f4 	.word	0x080005f4
 80005b4:	080005f4 	.word	0x080005f4
 80005b8:	080005f8 	.word	0x080005f8

080005bc <_init>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr

080005c8 <_fini>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr
