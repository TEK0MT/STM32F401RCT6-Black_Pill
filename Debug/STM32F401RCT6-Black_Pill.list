
STM32F401RCT6-Black_Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003dc  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003dc  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080003e4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000404  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000404  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004b9  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001df  00000000  00000000  00002509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000026e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000002ba  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000339  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003fe2  00000000  00000000  00002d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  00006db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00006e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003c4 	.word	0x080003c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080003c4 	.word	0x080003c4

080001d4 <HAL_RCC_OscConfig>:
#include "HAL/RCC/STM32F401xx_HAL_RCC.h"
/*
 * @brief Configure the RCC clock
 * @Param osc of RCC_OscInitTypeDef type
 * */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *osc){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RET = HAL_OK;
 80001dc:	2300      	movs	r3, #0
 80001de:	73fb      	strb	r3, [r7, #15]
	if(NULL == osc){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d102      	bne.n	80001ec <HAL_RCC_OscConfig+0x18>
		RET = HAL_ERROR;
 80001e6:	2301      	movs	r3, #1
 80001e8:	73fb      	strb	r3, [r7, #15]
 80001ea:	e056      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
	}
	else{
		if(osc->OscillatorType == RCC_OSCILLATORTYPE_HSE){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	d111      	bne.n	8000218 <HAL_RCC_OscConfig+0x44>
			if(osc->HSEState == RCC_HSE_ON){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <HAL_RCC_OscConfig+0x36>
				SET_BIT(RCC->CR,RCC_CR_HSEON_MASK);
 80001fc:	4b2a      	ldr	r3, [pc, #168]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a29      	ldr	r2, [pc, #164]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	e047      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
			else{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_MASK);
 800020a:	4b27      	ldr	r3, [pc, #156]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a26      	ldr	r2, [pc, #152]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	e040      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
		}
		else if (osc->OscillatorType == RCC_OSCILLATORTYPE_HSI){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d111      	bne.n	8000244 <HAL_RCC_OscConfig+0x70>
			if(osc->HSIState == RCC_HSI_ON){
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d106      	bne.n	8000236 <HAL_RCC_OscConfig+0x62>
				SET_BIT(RCC->CR,RCC_CR_HSION_MASK);
 8000228:	4b1f      	ldr	r3, [pc, #124]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1e      	ldr	r2, [pc, #120]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	e031      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
			else{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_MASK);
 8000236:	4b1c      	ldr	r3, [pc, #112]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a1b      	ldr	r2, [pc, #108]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 800023c:	f023 0301 	bic.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]
 8000242:	e02a      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
		}
		else if(osc->OscillatorType == RCC_OSCILLATORTYPE_LSE){
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b04      	cmp	r3, #4
 800024a:	d111      	bne.n	8000270 <HAL_RCC_OscConfig+0x9c>
			if(osc->LSEState == RCC_LSE_ON){
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d106      	bne.n	8000262 <HAL_RCC_OscConfig+0x8e>
				SET_BIT(RCC->BDCR,RCC_BDCR_LSEON_MASK);
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000258:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6713      	str	r3, [r2, #112]	@ 0x70
 8000260:	e01b      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
			else{
				CLEAR_BIT(RCC->BDCR,RCC_BDCR_LSEON_MASK);
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000266:	4a10      	ldr	r2, [pc, #64]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6713      	str	r3, [r2, #112]	@ 0x70
 800026e:	e014      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
		}
		else if(osc->OscillatorType == RCC_OSCILLATORTYPE_LSI){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b08      	cmp	r3, #8
 8000276:	d110      	bne.n	800029a <HAL_RCC_OscConfig+0xc6>
			if(osc->LSIState == RCC_LSI_ON){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d106      	bne.n	800028e <HAL_RCC_OscConfig+0xba>
				SET_BIT(RCC->CSR,RCC_CSR_LSION_MASK);
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000284:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6753      	str	r3, [r2, #116]	@ 0x74
 800028c:	e005      	b.n	800029a <HAL_RCC_OscConfig+0xc6>
			}
			else{
				CLEAR_BIT(RCC->CSR,RCC_CSR_LSION_MASK);
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000292:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <HAL_RCC_OscConfig+0xd4>)
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6753      	str	r3, [r2, #116]	@ 0x74
		}
		else{
			/*Nothing*/
		}
	}
	return RET;
 800029a:	7bfb      	ldrb	r3, [r7, #15]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40023800 	.word	0x40023800

080002ac <HAL_RCC_ClockConfig>:
/*
 * @brief Configure the RCC presclares
 * @Param osc of RCC_ClkInitTypeDef type
 * */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *osc){
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RET = HAL_OK;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
		if(NULL == osc){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d102      	bne.n	80002c4 <HAL_RCC_ClockConfig+0x18>
			RET = HAL_ERROR;
 80002be:	2301      	movs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e01a      	b.n	80002fa <HAL_RCC_ClockConfig+0x4e>
		}
		else{
			MODIFY_REG(RCC->CFGR,RCC_AHB_PRESCALER_MASK,osc->AHBCLKDivider);
 80002c4:	4b10      	ldr	r3, [pc, #64]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	490d      	ldr	r1, [pc, #52]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	608b      	str	r3, [r1, #8]
			MODIFY_REG(RCC->CFGR,RCC_APB_LOWSPEED_PRESCALER_MASK,osc->APB1CLKDivider);
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	4909      	ldr	r1, [pc, #36]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002e4:	4313      	orrs	r3, r2
 80002e6:	608b      	str	r3, [r1, #8]
			MODIFY_REG(RCC->CFGR,RCC_APB_HIGHSPEED_PRESCALER_MASK,osc->APB2CLKDivider);
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4904      	ldr	r1, [pc, #16]	@ (8000308 <HAL_RCC_ClockConfig+0x5c>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	608b      	str	r3, [r1, #8]
		}
		return RET;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800

0800030c <main>:
#include "HAL/RCC/STM32F401xx_HAL_RCC.h"

RCC_OscInitTypeDef osc = {.OscillatorType = RCC_OSCILLATORTYPE_HSE,.HSIState=RCC_HSI_OFF,.HSEState=RCC_HSE_ON,.LSEState = RCC_LSE_OFF,.LSIState=RCC_LSI_OFF};
	RCC_ClkInitTypeDef pre = {.AHBCLKDivider=RCC_AHB_PRESCALER_DIV2,.APB1CLKDivider=RCC_APB1_PRESCALER_DIV2,.APB2CLKDivider=RCC_APB2_PRESCALER_DIV2};
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	HAL_RCC_OscConfig(&osc);
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <main+0x14>)
 8000312:	f7ff ff5f 	bl	80001d4 <HAL_RCC_OscConfig>
	HAL_RCC_ClockConfig(&pre);
 8000316:	4803      	ldr	r0, [pc, #12]	@ (8000324 <main+0x18>)
 8000318:	f7ff ffc8 	bl	80002ac <HAL_RCC_ClockConfig>

    /* Loop forever */
	for(;;);
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <main+0x10>
 8000320:	20000000 	.word	0x20000000
 8000324:	20000014 	.word	0x20000014

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ffd7 	bl	800030c <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000374:	2000003c 	.word	0x2000003c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	@ (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	@ (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
